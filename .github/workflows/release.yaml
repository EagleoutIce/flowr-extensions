name: "Release Action"

'on':
  push:
    branches:
      - main

jobs:
  lint:
    name: "üë©‚Äçüè´ Linting (Full)"
    if: startsWith(github.event.head_commit.message, '[release:minor]') ||
        startsWith(github.event.head_commit.message, '[release:major]') ||
        startsWith(github.event.head_commit.message, '[release:patch]')
    runs-on: ubuntu-22.04
    steps:
      - name: "üõí Checkout Repository"
        uses: actions/checkout@v4
        with:
            submodules: true

      - name: "üåç Load Versions to Use"
        id: doc-global-versions
        run: bash .github/workflows/scripts/global-configuration.sh

      - name: "‚¨áÔ∏è Use Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: $ACTION_NODE_VERSION
          registry-url: "https://registry.npmjs.org/"

      - name: "üë©‚Äçüè´ Run linter"
        run: bash .github/workflows/scripts/run-flowr-command.sh lint-local

  test-full:
    name: "üß™ Test Suite (full)"
    needs: ['lint']
    if: ${{
          startsWith(github.event.head_commit.message, '[release:minor]') ||
          startsWith(github.event.head_commit.message, '[release:major]') ||
          startsWith(github.event.head_commit.message, '[release:patch]') || (
            always()
            && !failure()
            && (github.event_name == 'pull_request' && github.event.pull_request.base.ref == 'main')
          )
        }}
    timeout-minutes: 25
    strategy:
      fail-fast: false
      matrix:
        r-version: [ '4.4.0', '4.3.2', '4.2.3', '4.0.0', '3.6.0' ]
        os: [ ubuntu-latest ]
        include:
           - os: macos-latest
             r-version: '4.4.0'
           - os: windows-latest
             r-version: '4.4.0'
    runs-on: ${{ matrix.os }}
    concurrency:
      group: ${{ github.workflow }}-${{ github.ref }}-${{ matrix.r-version }}-${{ matrix.os }}
      cancel-in-progress: true
    steps: 
      - name: "üõí Checkout Repository"
        uses: actions/checkout@v4
        with:
            submodules: true

      - name: "üåç Load Versions to Use"
        id: doc-global-versions
        run: bash .github/workflows/scripts/global-configuration.sh

      - name: "‚¨áÔ∏è Use Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: $ACTION_NODE_VERSION
          registry-url: "https://registry.npmjs.org/"
      
      - name: "‚¨áÔ∏è Setup R"
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.r-version }}
      
      - name: "üì¶ Install R Packages"
        shell: Rscript {0}
        run: install.packages("xmlparsedata", repos="https://cloud.r-project.org/")
        
      - name: "üß™ Run the Tests"
        run: bash .github/workflows/scripts/run-flowr-command.sh "test-full -- --forbid-only"

      - name: "‚¨ÜÔ∏è Upload Coverage Reports to Codecov"
        if: ${{ inputs.coverage }}
        uses: codecov/codecov-action@v4
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: true
      
  release:
    name: "üì¶ Release"
    runs-on: ubuntu-latest
    needs: ['test-full']
    if: startsWith(github.event.head_commit.message, '[release:minor]') ||
        startsWith(github.event.head_commit.message, '[release:major]') ||
        startsWith(github.event.head_commit.message, '[release:patch]')
    steps:
      - name: "Checkout Repository"
        uses: actions/checkout@v4
        with:
          submodules: true
          lfs:        true
          token:      ${{ secrets.RELEASE_TOKEN }}
          fetch-depth: 0

      - name: "üåç Load Versions to Use"
        id: doc-global-versions
        run: bash .github/workflows/scripts/global-configuration.sh

      - name: "‚¨áÔ∏è Use Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: $ACTION_NODE_VERSION
          registry-url: "https://registry.npmjs.org/"
      
      - name: "‚¨áÔ∏è Setup R"
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: $ACTION_R_VERSION
      
      - name: "üì¶ Install R Packages"
        shell: Rscript {0}
        run: install.packages("xmlparsedata", repos="https://cloud.r-project.org/")

      - name: "‚öôÔ∏è Name and Email for Git (config) and update"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git pull

      - name: "üì¶ Install Dependencies"
        run: npm ci

      - name: "üåü Release"
        run: |
          step=$(echo "$MESSAGE" | sed -n -E 's/\[release:(patch|minor|major)].*/\1/p')
          title=$(echo "$MESSAGE" | sed -n -E 's/\[release:(patch|minor|major)] (.*)/\2/p')

          if [ -z "$step" ]; then
            echo "fatal: Release step not found in commit message."
            exit 1
          fi

          npm run release -- --increment "$step" --ci --verbose --github.releaseName="Release v\${version} (${title})"
          echo "version=$(node -p "require('./package.json').version")" >> "$GITHUB_OUTPUT"
        env:
          RELEASE_TOKEN: ${{ secrets.RELEASE_TOKEN }}
          # apparently, putting the message into an env variable first sanitizes it
          # (see https://github.com/flowr-analysis/flowr/security/code-scanning/29)
          MESSAGE: ${{ github.event.head_commit.message }}

      - name: "üîÅ Ensure up-to-date Dependencies"
        run: npm ci

      - name: "‚¨ÜÔ∏è Publish on NPM"
        # we use publish library because flowr itself is a runnable, and we do not want to publish something with extra
        # dist paths etc.
        # besides, we make dead-sure we have a clean directory to work on!
        run: |
          rm -rf dist
          npm run build
          npm run publish-library
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_PUBLISH_TOKEN }}

  deploy-docker:
    needs: ['release']
    name: "Deploy Docker (only on main)"
    uses: flowr-analysis/flowr/.github/workflows/deploy-docker.yaml@main
    secrets: inherit

  performance-test:
    name: "Performance Test"
    needs: ['release']
    # we do not run if the release workflow runs it with pushing
    if: startsWith(github.event.head_commit.message, '[release:minor]') ||
      startsWith(github.event.head_commit.message, '[release:major]') ||
      startsWith(github.event.head_commit.message, '[release:patch]')
    uses: flowr-analysis/flowr/.github/workflows/performance-test.yaml@main
    with:
      push: true
      ref: refs/tags/v${{ needs.release.outputs.version }}
    secrets: inherit
